cmdhistory=[";; Switching to clojure-mail.core-test namespace" "(pollingMail)" ";; Switching to clojure-mail.message namespace" "(auth\! \\"payreqbox@gmail.com\\" \\"1payreq$\\")" ";; Switching to clojure-mail.mailTest namespace" "(auth\! \\"payreqbox@gmail.com\\" \\"1payreq$\\")" "(unread-messages \\"INBOX\\")" "(pollingMail)" "(map msg/read (unread-messages \\"INBOX\\"))" ";; Switching to clojure-mail.mailTest namespace" ";; Switching to clojure-mail.mail namespace" "(+ 1 2)" "(in-ns 'clojure-mail.mail)" "(pollingMail)" "(defn pollingMail []\\r\\n  ;; Create your auth creds\\r\\n  (auth\! \\"payreqbox@gmail.com\\" \\"1payreq$\\")\\r\\n  ;; Read unread-messages in inbox\\r\\n  (unread-messages \\"INBOX\\"))" "(pollingMail)" "(def ms (unread-messages \\"INBOX\\"))" "(type ms)" "(aget ms 0)" "(.length ms)" "(alength ms)" "(def ms (unread-messages \\"INBOX\\"))" "(def probm (aget ms 0))" "(alength ms)" "probm" "(msg/read probm)" ";; Switching to clojure-mail.message namespace" "'clojure-mail.mail/probm" "clojure-mail.mail/probm" "(def probm clojure-mail.mail/probm)" "probm" "(read probm)" "(clojure-mail.message/read probm)" "(doc read)" ";; Switching to clojure-mail.message namespace" "(doc read)" "(clojure-mail.message/read probm)" "(ns-publics *ns*)" "(keys *1)" "(ns-publics *ns*)" "(keys *1)" "(read-msg probm)" "*e" "(read-msg probm)" "(multipart? probm)" "(message-body probm)" "(message-parts probm)" "*e" "(.printStackTrace *e)" "(doc into)" "(conj [] 1)" "(conj [1] 2)" "(into [] [1 2])" "(doc conj)" "'(1 2 3)" "(conj '(1 2 3) 4)" "(conj [1 2 3] 4)" "(cons 4 [1 2 3])" "(doc cons)" "(get-content probm)" "probm" "(get-content probm)" "(def probc (get-content probm))" "probc" "(read-multi probc)" "(.getCount probc)" "(def probp1 (.getBodyPart probc 0))" "probp1" "(def probp2 (.getBodyPart probc 1))" "probp2" "(multipart? probp1)" "(multipart probp2)" "(multipart? probp2)" "(.getContentType probp2)" "(.getContent probp2)" "(.getContentType probp1)" "(.getContent probp1)" "(.getCount *1)" "(def testcontent (.getContent probp1))" "(.getCount testcontent)" "(.getContentType (.getBodyPart testcontent 0))" "(.getContentType (.getBodyPart testcontent 1\\n                   ))" "(read-multi probc)" "*e" "probx" "probc" "(read-multi probc)" "(def res *1)" "res" "(type res)" "probm" ";; Switching to clojure-mail.mail namespace" "(unread-messages \\"INBOX\\")" "(def probm (aget *1 0))" "probm" ";; Switching to clojure-mail.message namespace" "(def probm clojure-mail.mail/probm)" "(message-body probm)" "(.getContentType probm)" "(.getContent probm)" "(def probc *1)" "probc" "(read-multi probc)" "(message-body msg)" "(message-body probm)" "(.printStackTrace *e)" "(read-multi probc)" "(flattan *1)" "(flatten (read-multi probc))" "(message-body probm)" "(count *1)" "(def mym (read-msg probm))" "(keys mym)" "(\:content-type mym)" "(count (\:body mym))" "(map type (\:body mym))" "(map keys (\:body mym))" "(map \:content-type (\:body mym))" "(filter (fn [s] (.startsWith s \\"APPLICATION/PDF\\")) (map \:content-type (\:body mym)))" "(first *1)" "(aget (.split *1 \\"name\=\\") 1)" ";; Switching to clojure-mail.mail namespace"]
eclipse.preferences.version=1
